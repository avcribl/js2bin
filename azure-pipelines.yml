jobs:
- job: BuildBaseExe
  timeoutInMinutes: 0
  strategy:
    matrix:
      # linux_arm64:
      #   imageName: 'ubuntu-20.04'
      #   arch: 'linux/arm64'
      #   node: '20.18.0'

      # linux_amd64:
      #   imageName: 'ubuntu-20.04'
      #   arch: 'linux/amd64'
      #   node: '20.18.0'
      #   ptrcompress: false

      # linux_amd64_ptrc:
      #   imageName: 'ubuntu-20.04'
      #   arch: 'linux/amd64'
      #   node: '20.18.0'
      #   ptrcompress: true

      # windows_2019:
      #   imageName: 'windows-2019'
      #   node: '20.18.0'
      #   ptrcompress: false
      # windows_2019_ptrc:
      #   imageName: 'windows-2019'
      #   node: '20.18.0'
      #   ptrcompress: true

      macos_arm64:
        imageName: 'macOS-15'
        node: '20.18.0'
        arch: 'arm64'
        ptrcompress: false
      # macos_arm64_ptrc:
      #   imageName: 'macOS-15'
      #   node: '20.18.0'
      #   arch: 'arm64'
      #   ptrcompress: true

      # macos_x64:
      #   imageName: 'macOS-15'
      #   node: '20.18.0'
      #   arch: 'x64'
      #   ptrcompress: false
      # macos_x64_ptrc:
      #   imageName: 'macOS-15'
      #   node: '20.18.0'
      #   arch: 'x64'
      #   ptrcompress: true
      
  pool:
    vmImage: $(imageName)
  steps:
  - task: UsePythonVersion@0
    displayName: Setup Python
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'
  - task: NodeTool@0
    displayName: Install Node
    inputs:
      versionSpec: '10.x'
  # - script: sudo apt-get update && sudo apt-get install -y gcc-4.9 g++-4.9
  #   condition: contains(variables['Agent.JobName'], 'linux')
  #   displayName: Install Linux build dependencies
  #- script: choco install visualcpp-build-tools --version 14.0.25420.1 -fy && npm config set msvs_version 2015
  #  condition: contains(variables['Agent.JobName'], 'windows_2015')
  #  displayName: Install Windows build dependencies
  - script: choco install nasm -fy
    displayName: Install Windows Assembler (NASM)
    condition: contains(variables['Agent.JobName'], 'windows')
  - script: npm ci
    displayName: Install dependencies
  - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    displayName: setup docker for multi platform
    condition: contains(variables['Agent.JobName'], 'linux')
  ## linux and macos builds
  # TODO replace this line
  # - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --size=4MB --upload --clean --arch=${ARCH}
  - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --clean --arch=${ARCH}
    displayName: Build base node binaries linux or macos
    condition: or(contains(variables['Agent.JobName'], 'linux'), contains(variables['Agent.JobName'], 'macos'))
    env:
      GITHUB_TOKEN: $(PersonalGithubToken)
      ARCH: $(arch)
  ## non-linux builds
  - script: node js2bin.js --ci --container=true --pointer-compress=$(ptrcompress) --node=$(node) --size=6MB --size=4MB --upload --clean
    displayName: Build base node binaries non-linux
    condition: not(or(contains(variables['Agent.JobName'], 'linux'), contains(variables['Agent.JobName'], 'macos')))
    env:
      GITHUB_TOKEN: $(PersonalGithubToken)
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'build/node-v20.18.0/out/Release/node'
      artifact: 'node'
      publishLocation: pipeline