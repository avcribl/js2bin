--- a/src/node_buffer.h
+++ b/src/node_buffer.h
@@ -86,6 +86,12 @@ static inline bool IsWithinBounds(size_t off, size_t len, size_t max) {
   return true;
 }
 
+std::unique_ptr<v8::BackingStore> CreateBackingStore(v8::Isolate* isolate,
+                                                     void* data,
+                                                     size_t byte_length,
+                                                     v8::BackingStore::DeleterCallback deleter,
+                                                     void* deleter_data);
+
 }  // namespace Buffer
 }  // namespace node
 

--- a/src/node_sea.cc
+++ b/src/node_sea.cc
@@ -13,6 +13,7 @@
 #include "node_v8_platform-inl.h"
 #include "simdjson.h"
 #include "util-inl.h"
+#include "node_buffer.h"
 
 // The POSTJECT_SENTINEL_FUSE macro is a string of random characters selected by
 // the Node.js project that is present only once in the entire binary. It is
@@ -799,7 +800,8 @@ void GetAsset(const FunctionCallbackInfo<Value>& args) {
   }
   // We cast away the constness here, the JS land should ensure that
   // the data is not mutated.
-  std::unique_ptr<v8::BackingStore> store = ArrayBuffer::NewBackingStore(
+  std::unique_ptr<BackingStore> store = node::Buffer::CreateBackingStore(
+      args.GetIsolate(),
       const_cast<char*>(it->second.data()),
       it->second.size(),
       [](void*, size_t, void*) {},


--- a/src/node_trace_events.cc
+++ b/src/node_trace_events.cc
@@ -7,6 +7,7 @@
 #include "node_v8_platform-inl.h"
 #include "tracing/agent.h"
 #include "util-inl.h"
+#include "node_buffer.h"
 
 #include <set>
 #include <string>
@@ -130,7 +131,8 @@ static void GetCategoryEnabledBuffer(const FunctionCallbackInfo<Value>& args) {
       TRACE_EVENT_API_GET_CATEGORY_GROUP_ENABLED(category_name.out());
   uint8_t* enabled_pointer_cast = const_cast<uint8_t*>(enabled_pointer);
 
-  std::unique_ptr<BackingStore> bs = ArrayBuffer::NewBackingStore(
+  std::unique_ptr<BackingStore> bs = node::Buffer::CreateBackingStore(
+      isolate,
       enabled_pointer_cast,
       sizeof(*enabled_pointer_cast),
       [](void*, size_t, void*) {},


--- a/src/crypto/crypto_util.cc
+++ b/src/crypto/crypto_util.cc
@@ -693,7 +693,8 @@ void SecureBuffer(const FunctionCallbackInfo<Value>& args) {
   }
   auto released = data.release();
 
-  std::shared_ptr<BackingStore> store = ArrayBuffer::NewBackingStore(
+  std::shared_ptr<BackingStore> store = node::Buffer::CreateBackingStore(
+      env->isolate(),
       released.data,
       released.len,
       [](void* data, size_t len, void* deleter_data) {
